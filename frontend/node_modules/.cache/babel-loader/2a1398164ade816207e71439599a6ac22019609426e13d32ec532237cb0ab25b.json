{"ast":null,"code":"var _jsxFileName = \"/Users/trtp/working/milo/final_pricecalc_master/frontend/src/components/VendorView.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport axios from 'axios';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/styles/ag-grid.css';\nimport 'ag-grid-community/styles/ag-theme-quartz.css';\nimport '../AppGrid.css';\nimport VendorForm from './VendorForm';\nimport { SearchBar } from './SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getData(model) {\n  try {\n    const response = await axios.get(`http://localhost:8000/${model}`);\n    const dataArray = Object.values(response.data);\n    window.ptr = dataArray;\n    return dataArray;\n  } catch (error) {\n    console.error('There was a BIGFAT error!', error);\n  }\n}\nconst GridVendor = () => {\n  _s();\n  const [gridApi, setGridApi] = useState(null);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [search, setSearch] = useState('');\n  const [showForm, setShowForm] = useState(false);\n  const [rowData, setRowData] = useState([]);\n  const [rerender, setRerender] = useState(false);\n  const [gridKey, setGridKey] = useState(1);\n  const [colData, setColData] = useState([{\n    headerName: 'Vendor ID',\n    field: 'name_id',\n    checkboxSelection: true,\n    headerCheckboxSelection: true,\n    headerCheckboxSelectionFilteredOnly: true\n  }, {\n    headerName: 'Origin',\n    field: 'origin',\n    editable: true\n  }, {\n    headerName: 'PP Rate',\n    field: 'pp_rate_',\n    editable: true,\n    valueFormatter: params => `${params.value}%`\n  }, {\n    headerName: 'Ex Rate',\n    field: 'exchange_rate_',\n    editable: true,\n    valueFormatter: params => `${params.value}%`\n  }]);\n  function wait(seconds) {\n    return new Promise(resolve => {\n      setTimeout(resolve, seconds * 1000);\n    });\n  }\n  useEffect(() => {\n    const fetchData = async () => {\n      await wait(1);\n      console.log('fetching data');\n      const data = await getData('vendor');\n      setRowData(data);\n      console.log('data is: ', data);\n      if (gridApi) {\n        console.log('calling row reredner');\n        gridApi.setRowData(data);\n        console.log('data is: ', data);\n        gridApi.refreshCells({\n          force: true\n        });\n      }\n    };\n    fetchData();\n  }, [rerender]);\n  const updateVendorData = useCallback(param => {\n    setRowData([param, ...rowData]);\n  });\n  const handleCellValueChanged = async event => {\n    try {\n      for (let key in event.data) {\n        if (event.data[key] === undefined || event.data[key] === null) {\n          console.error(`Error: ${key} is empty`);\n          return;\n        }\n      }\n      const response = await axios.patch(`http://localhost:8000/vendor/${event.data.name_id}`, event.data);\n      //update all skus with vendor id... \n    } catch (error) {\n      console.error('Error updating Vendor data:', error);\n    }\n  };\n  const getrowId = useCallback(params => {\n    return params.data.name_id;\n  });\n  const onGridReady = params => {\n    setGridApi(params.api);\n  };\n  const onSelectionChanged = param => {\n    setSelectedRows(gridApi.getSelectedRows());\n  };\n  const onRowClicked = event => {\n    event.node.setSelected(!event.node.isSelected());\n  };\n  window.trow = selectedRows;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-quartz-dark\",\n    style: {\n      height: '70vh',\n      width: 1270\n    },\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      title: \"Vendor\",\n      titlecount: rowData.length,\n      search: search,\n      setSearch: setSearch,\n      data: rowData,\n      setData: setRowData,\n      selectedRows: selectedRows,\n      setRerender: setRerender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AgGridReact, {\n      onGridReady: onGridReady,\n      getRowId: getrowId,\n      columnDefs: colData,\n      rowData: rowData,\n      defaultColDef: {\n        flex: 1,\n        filter: true,\n        sortable: true,\n        floatingFilter: true\n      },\n      onCellValueChanged: handleCellValueChanged,\n      onSelectionChanged: onSelectionChanged\n      // onRowClicked={onRowClicked}\n      ,\n      suppressRowClickSelection: true,\n      animateRows: false,\n      rowSelection: 'multiple'\n    }, gridKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: showForm ? \"dark\" : \"primary\",\n        onClick: () => setShowForm(!showForm),\n        children: showForm ? 'Close Vendor' : 'New Vendor'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), showForm && /*#__PURE__*/_jsxDEV(VendorForm, {\n        addVendor: updateVendorData,\n        rowData: rowData,\n        onClose: () => setShowForm(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n_s(GridVendor, \"i0xJ09UHAS8peHPEacSaD7jEsOk=\");\n_c = GridVendor;\nexport default GridVendor;\nvar _c;\n$RefreshReg$(_c, \"GridVendor\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","Button","axios","AgGridReact","VendorForm","SearchBar","jsxDEV","_jsxDEV","getData","model","response","get","dataArray","Object","values","data","window","ptr","error","console","GridVendor","_s","gridApi","setGridApi","selectedRows","setSelectedRows","search","setSearch","showForm","setShowForm","rowData","setRowData","rerender","setRerender","gridKey","setGridKey","colData","setColData","headerName","field","checkboxSelection","headerCheckboxSelection","headerCheckboxSelectionFilteredOnly","editable","valueFormatter","params","value","wait","seconds","Promise","resolve","setTimeout","fetchData","log","refreshCells","force","updateVendorData","param","handleCellValueChanged","event","key","undefined","patch","name_id","getrowId","onGridReady","api","onSelectionChanged","getSelectedRows","onRowClicked","node","setSelected","isSelected","trow","className","style","height","width","children","title","titlecount","length","setData","fileName","_jsxFileName","lineNumber","columnNumber","getRowId","columnDefs","defaultColDef","flex","filter","sortable","floatingFilter","onCellValueChanged","suppressRowClickSelection","animateRows","rowSelection","variant","onClick","addVendor","onClose","_c","$RefreshReg$"],"sources":["/Users/trtp/working/milo/final_pricecalc_master/frontend/src/components/VendorView.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button } from 'react-bootstrap';\n\nimport axios from 'axios'\nimport { AgGridReact } from 'ag-grid-react'\nimport 'ag-grid-community/styles/ag-grid.css'\nimport 'ag-grid-community/styles/ag-theme-quartz.css'\nimport '../AppGrid.css';\nimport VendorForm from './VendorForm'\nimport { SearchBar } from './SearchBar';\n\nasync function getData(model) {\n    try {\n        const response = await axios.get(`http://localhost:8000/${model}`);\n        const dataArray = Object.values(response.data);\n        window.ptr = dataArray;\n        return dataArray;\n    } catch (error) {\n        console.error('There was a BIGFAT error!', error);\n    }\n}\n\n\nconst GridVendor = () => {\n    const [gridApi, setGridApi] = useState(null);\n    const [selectedRows, setSelectedRows] = useState([]);\n    const [search, setSearch] = useState('');\n    const [showForm, setShowForm] = useState(false);\n    const [rowData, setRowData] = useState([])\n    const [rerender, setRerender] = useState(false);\n    const [gridKey, setGridKey] = useState(1);\n    const [colData, setColData] = useState(\n        [\n            {\n                headerName: 'Vendor ID', field: 'name_id',\n                checkboxSelection: true,\n                headerCheckboxSelection: true,\n                headerCheckboxSelectionFilteredOnly: true\n            },\n            { headerName: 'Origin', field: 'origin', editable: true },\n            { headerName: 'PP Rate', field: 'pp_rate_', editable: true, valueFormatter: params => `${params.value}%` },\n            { headerName: 'Ex Rate', field: 'exchange_rate_', editable: true, valueFormatter: params => `${params.value}%` },\n        ]\n    )\n\n    function wait(seconds) {\n        return new Promise(resolve => {\n            setTimeout(resolve, seconds * 1000);\n        });\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n                    await wait(1);\n            console.log('fetching data');\n            const data = await getData('vendor');\n            setRowData(data);\n            console.log('data is: ', data);\n            if (gridApi) {\n                console.log('calling row reredner');\n                gridApi.setRowData(data);\n                console.log('data is: ', data);\n                gridApi.refreshCells({ force: true });\n            }\n        };\n        fetchData();\n    }, [rerender]);\n\n    const updateVendorData = useCallback((param) => {\n        setRowData([param, ...rowData])\n    })\n\n    const handleCellValueChanged = async (event) => {\n        try {\n            for (let key in event.data) {\n                if (event.data[key] === undefined || event.data[key] === null) {\n                    console.error(`Error: ${key} is empty`);\n                    return;\n                }\n            }\n            const response = await axios.patch(`http://localhost:8000/vendor/${event.data.name_id}`, event.data);\n            //update all skus with vendor id... \n        } catch (error) {\n            console.error('Error updating Vendor data:', error);\n        }\n    }\n\n    const getrowId = useCallback(params => {\n        return params.data.name_id\n    })\n\n    const onGridReady = params => {\n        setGridApi(params.api);\n    };\n\n    const onSelectionChanged = (param) => {\n        setSelectedRows(gridApi.getSelectedRows());\n    };\n\n    const onRowClicked = (event) => {\n        event.node.setSelected(!event.node.isSelected());\n    };\n\n    window.trow = selectedRows\n    return (\n        <div className=\"ag-theme-quartz-dark\" style={{ height: '70vh', width: 1270 }}>\n            <SearchBar title='Vendor' titlecount={rowData.length} search={search} setSearch={setSearch} data={rowData} setData={setRowData} selectedRows={selectedRows} setRerender={setRerender} />\n            <AgGridReact\n                key={gridKey}\n                onGridReady={onGridReady}\n                getRowId={getrowId}\n                columnDefs={colData}\n                rowData={rowData}\n                defaultColDef={{ flex: 1, filter: true, sortable: true, floatingFilter: true }}\n                onCellValueChanged={handleCellValueChanged}\n                onSelectionChanged={onSelectionChanged}\n                // onRowClicked={onRowClicked}\n                suppressRowClickSelection={true}\n                animateRows={false}\n                rowSelection={'multiple'}\n            />\n            <div className='mt-4'>\n                <Button variant={showForm ? \"dark\" : \"primary\"} onClick={() => setShowForm(!showForm)}>\n                    {showForm ? 'Close Vendor' : 'New Vendor'}\n                </Button>\n                {showForm && <VendorForm addVendor={updateVendorData} rowData={rowData} onClose={() => setShowForm(false)} />}\n            </div>\n        </div >\n    )\n\n}\n\nexport default GridVendor;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}