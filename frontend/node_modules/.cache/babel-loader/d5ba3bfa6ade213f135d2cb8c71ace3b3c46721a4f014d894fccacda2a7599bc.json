{"ast":null,"code":"// ag-grid-react v31.0.3\n\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PortalManager = void 0;\nvar PortalManager = /** @class */function () {\n  function PortalManager(refresher, wrappingElement, maxComponentCreationTimeMs) {\n    this.destroyed = false;\n    this.portals = [];\n    this.hasPendingPortalUpdate = false;\n    this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n    this.refresher = refresher;\n    this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n  }\n  PortalManager.prototype.getPortals = function () {\n    return this.portals;\n  };\n  PortalManager.prototype.destroy = function () {\n    this.destroyed = true;\n  };\n  PortalManager.prototype.destroyPortal = function (portal) {\n    this.portals = this.portals.filter(function (curPortal) {\n      return curPortal !== portal;\n    });\n    this.batchUpdate();\n  };\n  PortalManager.prototype.getComponentWrappingElement = function () {\n    return this.wrappingElement;\n  };\n  PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n    this.portals = __spreadArray(__spreadArray([], this.portals), [portal]);\n    this.waitForInstance(reactComponent, resolve);\n    this.batchUpdate();\n  };\n  PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n    this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n    this.batchUpdate();\n  };\n  PortalManager.prototype.batchUpdate = function () {\n    var _this = this;\n    if (this.hasPendingPortalUpdate) {\n      return;\n    }\n    setTimeout(function () {\n      if (!_this.destroyed) {\n        // destroyed?\n        _this.refresher();\n        _this.hasPendingPortalUpdate = false;\n      }\n    });\n    this.hasPendingPortalUpdate = true;\n  };\n  PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n    var _this = this;\n    if (startTime === void 0) {\n      startTime = Date.now();\n    }\n    // if the grid has been destroyed in the meantime just resolve\n    if (this.destroyed) {\n      resolve(null);\n      return;\n    }\n    if (reactComponent.rendered()) {\n      resolve(reactComponent);\n    } else {\n      if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n        // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n        // can mess up contexts\n        if (reactComponent.isNullValue()) {\n          resolve(reactComponent);\n          return;\n        }\n        console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms.\");\n        console.error(\"    If the component is using `forwardRef` but not `useImperativeHandle`, add the following: `useImperativeHandle(ref, () => ({}));`\");\n        return;\n      }\n      window.setTimeout(function () {\n        _this.waitForInstance(reactComponent, resolve, startTime);\n      });\n    }\n  };\n  PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n  return PortalManager;\n}();\nexports.PortalManager = PortalManager;","map":{"version":3,"names":["__spreadArray","to","from","i","il","length","j","Object","defineProperty","exports","value","PortalManager","refresher","wrappingElement","maxComponentCreationTimeMs","destroyed","portals","hasPendingPortalUpdate","MAX_COMPONENT_CREATION_TIME_IN_MS","prototype","getPortals","destroy","destroyPortal","portal","filter","curPortal","batchUpdate","getComponentWrappingElement","mountReactPortal","reactComponent","resolve","waitForInstance","updateReactPortal","oldPortal","newPortal","indexOf","_this","setTimeout","startTime","Date","now","rendered","isNullValue","console","error","getReactComponentName","window"],"sources":["/Users/trtp/working/milo/final_pricecalc_master/frontend/node_modules/ag-grid-react/lib/shared/portalManager.js"],"sourcesContent":["// ag-grid-react v31.0.3\n\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PortalManager = void 0;\nvar PortalManager = /** @class */ (function () {\n    function PortalManager(refresher, wrappingElement, maxComponentCreationTimeMs) {\n        this.destroyed = false;\n        this.portals = [];\n        this.hasPendingPortalUpdate = false;\n        this.wrappingElement = wrappingElement ? wrappingElement : 'div';\n        this.refresher = refresher;\n        this.maxComponentCreationTimeMs = maxComponentCreationTimeMs ? maxComponentCreationTimeMs : PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS;\n    }\n    PortalManager.prototype.getPortals = function () {\n        return this.portals;\n    };\n    PortalManager.prototype.destroy = function () {\n        this.destroyed = true;\n    };\n    PortalManager.prototype.destroyPortal = function (portal) {\n        this.portals = this.portals.filter(function (curPortal) { return curPortal !== portal; });\n        this.batchUpdate();\n    };\n    PortalManager.prototype.getComponentWrappingElement = function () {\n        return this.wrappingElement;\n    };\n    PortalManager.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n        this.portals = __spreadArray(__spreadArray([], this.portals), [portal]);\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    };\n    PortalManager.prototype.updateReactPortal = function (oldPortal, newPortal) {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    };\n    PortalManager.prototype.batchUpdate = function () {\n        var _this = this;\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n        setTimeout(function () {\n            if (!_this.destroyed) { // destroyed?\n                _this.refresher();\n                _this.hasPendingPortalUpdate = false;\n            }\n        });\n        this.hasPendingPortalUpdate = true;\n    };\n    PortalManager.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n        var _this = this;\n        if (startTime === void 0) { startTime = Date.now(); }\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        }\n        else {\n            if (Date.now() - startTime >= this.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n                console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + this.maxComponentCreationTimeMs + \"ms.\");\n                console.error(\"    If the component is using `forwardRef` but not `useImperativeHandle`, add the following: `useImperativeHandle(ref, () => ({}));`\");\n                return;\n            }\n            window.setTimeout(function () {\n                _this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    };\n    PortalManager.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n    return PortalManager;\n}());\nexports.PortalManager = PortalManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}